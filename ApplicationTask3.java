package at3;

public class ApplicationTask3 {
    /**
     * ここのコメントに下記の各観点で説明やアピールポイントを書くこと．
     * この記述を参考にしながら関連項目を評価するので，
     * 未記述の場合はそれら評価項目の点数が0点になる可能性があることに注意．
     * ・次の10項目について，プログラムやその要素・概念をどこでどのように工夫・活用しているか(50%)
     *   1. カプセル化
     *   2. 継承
     *   3. 多態性
     *   4. クラス分け・メソッド分け
     *   5. ジェネリクス
     *   6. コレクション
     *   7. プログラム変更方法を制約する修飾子（アクセス制御やfinal，abstractなど）
     *   8. static修飾子
     *   9. 標準ライブラリ
     *  10. その他，上記に含まれないソースコード上の技術的工夫点
     * ・オリジナリティ（授業の例題に見られないテーマであり，かつ結果的に多数の受講生間で類似度が高い内容でないこと）（30%）
     * ・ユーザが使いやすくなるような工夫(10%)
     * ・ユーザの誤った操作を十分に許容できる例外処理(10%)
     * ・ソースコードは読みやすさ(10%)：より詳細には以下の観点でチェックする
     * 　- クラスの構造からクラスの役割分担が読み解きやすいかどうか
     *   - クラスの役割を踏まえてフィールド・メソッドが読み解きやすいかどうか
     *   - ソースコード中のコメントが適切で理解しやすいかどうか
     * ・ユーザ視点での実用性または面白さ (10%)
     * 
     * 実行方法に特定の条件がある場合は，以下にインストール・操作マニュアル代わりに説明を書くこと．
     * 仕様違反や説明不足等により実行できない場合は上記の評価基準によらず評点が大幅に減点される可能性があることに注意．
     */

    /*
     *  本プログラムは、Tic Tac Toe ゲーム(マルバツゲーム)である
     *  1．プログラムの要素について
     * 　　1) カプセル化
     *      ゲームの進行状況を保存する gameBoardをprotectedに宣言し、
     *      その操作は必ずメソッドを通じるように実装している。
     * 　　2) 継承
     *      本ゲームには1人プレイモードと2人プレイモードが存在し、両方はゲームの一部である。
     *      そのため、SinglePlayerModeクラスとTwoPlayerModeクラスはゲームの本体TicTacToeクラスを継承するように実装した。
     * 　　3) 多能性
     *      1人プレイモードと2人プレイモードでは同じメソッドで違う動作をする必要がある。
     *      そのため、Overrideを使用している。
     * 　　4) クラス分け・メソッド分け
     *      本プログラムでは機能によってクラスとメソッドを適宜分けている。
     *      ApplicationTaskクラスはプログラムの開始ポイントであり、WelcomeScreenを呼び出す。
     * 
     *      WelcomeScreenクラスはプログラムを最初に実行したときのメッセージを出力し、
     *      ユーザからどのモードをプレイするか入力を受けSinglePlayerModeまたはTwoPlayerModeクラスを呼び出す。
     *      これらの機能はfirstRunメソッドに定義されている。
     *      また、使用方法やゲームのルールを知らないユーザのためにヘルプを提供する機能も持つ。ヘルプはhelpListメソッドが提供する。
     * 
     *      TicTacToeクラスはゲームの本体であり、1人プレイモードと2人プレイモードで共通に使用する機能を含んでいる。
     *      現在のゲームボードの状況をコンソル画面上に出力するGamePrinterメソッド、
     *      ユーザからどのマスに自分のマークを置くか入力を受けゲームボードに反映するPlayerHandlerメソッド、
     *      ゲームの終了条件をチェックするGameStatMonitorメソッド、
     *      ゲームが終了したときの動作を実装したGameOverHandlerメソッドを持つ。
     * 
     *      SinglePlayerModeクラスは1人プレイモードに必要なメソッドを実装している。
     *      1人プレイモードで、プレイヤーはコンピュータと対戦するためコンピュータの動作も定義する必要がある。
     *      全体の流れを管理するrunメソッド、
     *      最初に1回のみ実行され簡単な説明を行うfirstRunメソッド、
     *      コンピュータの動作を決定するPlayerCOMHandlerメソッド、
     *      ゲームボード上のマスの評価を行うEstimateメソッド、
     *      3連続を達成できるのかを判別するisRowメソッドなどを含む。
     *      
     *      TwoPlayerModeクラスは2人プレイモードの動作を示す。
     *      SinglePlayerクラスと同様にrun、firstRunメソッドを持ち、
     *      他の機能は親クラスのメソッドを使用している。
     * 
     * 　　5) static修飾子
     *      WelcomeScreenクラスの全メソッドはどの操作をしても必ず1回は実行されるため、
     *      static修飾子を使用している。
     * 　　6) 標準ライブラリ
     *      ユーザから入力を受けるための標準ライブラリScannerを使用している。
     * 　　7) その他
     *      クラス内でのみ使われるメソッドはprivate、他のクラスからも呼び出すメソッドはprotectedに指定している。
     * 
     *  2．オリジナリティ
     *      コンピュータとの対戦に対応しているところはオリジナリティがあると考える
     * 
     *  3．ユーザの使いやすさについて
     *      プログラムの使い方やゲームのルールを知らないユーザのためにヘルプ機能を提供している。
     *      ゲームボードが3x3サイズであるため、ユーザがどのマスに自分のマークを置くか入力するとき、テンキーの配置と同様にした。
     *      見やすくするためにコンソル画面上に出力するとき「=」のような記号を使用して区別している。
     * 
     *  4．ユーザの誤操作への対応
     *      try-catch文やif文を使用し、
     *      ユーザが入力範囲を超えた数字や数字ではない文字を入力したとき再入力するように案内文を出力している。
     * 
     *  5．実用性または面白さについて
     *      2人プレイモードはもちろん、コンピュータとの対戦もできて1人でも遊べることが特徴である。
     */


    public static void main(String[] args) {
        WelcomeScreen.firstRun();   // WelcomeScreenを呼び出す
    }
}